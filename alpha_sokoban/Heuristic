def manhattan_distance1(bx, stg):
    return abs(bx[0] - stg[0]) + abs(bx[1] - stg[1])

def greedy1(boxes,storage):
    dis = [[manhattan_distance1(bx, stg) for stg in storage] for bx in boxes]
    a=np.array(dis)
    sol=0
    while a.size>0:
        sol=sol+a.min()
        x=np.where(a == a.min())
        a=np.delete(a,x[0],axis=0)
        a=np.delete(a,x[1],axis=1)
    return sol    


def Heuristic1(state):
    boxes = state.get_boxes()
    storage = state.get_storage()#or player on storage
    state_dist = greedy1(boxes, storage)
    return state_dist

def Heuristic2(state):
    boxes = state.get_boxes()
    storage = state.get_storage()#or player on storage
    state_dist = greedy1(boxes, storage)
    game_dis = 0
    play_pos =state.get_player_position#?
    if boxes:
        game_dis = min([manhattan_distance1(bx, play_pos) for bx in boxes]) - 1
        if game_dis < 0:
            game_dis = 0
    return state_dis + game_dis  
